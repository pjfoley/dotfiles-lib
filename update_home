#!/bin/bash

(( $# >= 1 )) && [ -d $1 ] && USER_HOME=${1%/} || USER_HOME="${HOME}"
(( $# >= 2 )) && [ -d $2 ] && DOTFILES_SRC=${2%/} || DOTFILES_SRC="${USER_HOME}/.dotfiles/home"
(( $# >= 3 )) && [ -d $3 ] && DOTFILES_BKUP=${3%/} || DOTFILES_BKUP="${USER_HOME}/.dotfiles_org"

lnk(){ ln -fs $2 $3; echo "$(tput setaf 3)${1} $(tput sgr0) - $(tput setaf 2)${2} $(tput sgr0) to ${3}"; }
cpy(){ mkdir -p "$(dirname $3)" && cp -Rpf $2 $3; echo "$(tput setaf 5)${1} $(tput sgr0) - $(tput setaf 2)${2} $(tput sgr0) to ${3}"; }
mov(){ mkdir -p "$(dirname $3)" && mv -fu $2 $3; echo "$(tput setaf 1)${1} $(tput sgr0) - $(tput setaf 2)${2} $(tput sgr0) to ${3}"; }
mkd(){ mkdir -p $3; echo "$(tput setaf 1)${1} $(tput sgr0) - $(tput setaf 2)${3} $(tput sgr0)"; }
rm_f(){ rm -f $2; echo "$(tput setaf 1)${1} $(tput sgr0) - $(tput setaf 2)${2} $(tput sgr0)"; }
rm_d(){ rmdir $2; echo "$(tput setaf 1)${1} $(tput sgr0) - $(tput setaf 2)${2} $(tput sgr0)"; }

exists_file()
{
  # Check for existance of file or directory
  ( [[ $# == 1 ]] \
    && ( [[ -e ${1} ]] )
  ) || \
  # If link confirm it points to dot file or if exists both files equal each other
  ( [[ $# == 2 ]] \
      && ( [[ -h ${2} ]] && [[ $(readlink ${2}) == ${1} ]] ) \
      || ( [[ ! -d $2 ]] && [[ -e $2 ]] && $(cmp -s $1 $2) ) \
      || ( [[ -d $2 ]] && [[ "$(file_real_name $(get_dir $1 $DOTFILES_SRC))"  == "$(file_real_name $(get_dir $2 $USER_HOME))" ]] ) \
  ) ;
}
# Call exists function and negate the result
not_exists_file(){ ! (( [[ $# == 1 ]] && exists_file $1 ) || ( [[ $# == 2 ]] && exists_file $1 $2)) ; }

if [[ ! -d ${DOTFILES_BKUP} ]]; then
  mkdir -p ${DOTFILES_BKUP}
fi

confirm_move()
{
  l_question="$*"

  while true; do
  read -p "${l_question} " -n 1 l_response
    case $l_response in
      [Yy]* )
        echo
        echo true
        break
        ;;
      [Nn]* )
        echo
        echo false
        break
        ;;
    esac
  done
}

get_dir()
{
  FULL_FILE_PATH=$1
  DOTFILES=$2

  HEAD="$(file_real_name $(basename $FULL_FILE_PATH))"
  RESIDUAL_PATH=$(dirname ${FULL_FILE_PATH})

  while [[ ! ${DOTFILES%/} == $RESIDUAL_PATH ]]; do
    HEAD="$(file_real_name $(basename $RESIDUAL_PATH))/$HEAD"
    RESIDUAL_PATH=$(dirname $RESIDUAL_PATH)
  done

  [[ ! "$HEAD" == "." ]] && echo $HEAD || echo
}



# Files marked as cpy or mov will be move
file_real_name()
{
  case "${1::4}" in
    "dot_" )
      echo ".${1:4}" ;;
    "cpy_" | "mov_" | "mkd_" )
      echo "${1:4}" ;;
    * )
      echo "${1}" ;;
  esac
}

dotfiles_action()
{
  DOTFILES_FILE=$1
  SOURCE=$2
  DESTINATION=$3

  case "${DOTFILES_FILE::4}" in
    "mov_" )
      mov "Moving" $SOURCE $DESTINATION ;;
    "mkd_" )
      mkd "Make Directory" $SOURCE $DESTINATION ;;
    "cpy_" )
      cpy "Copying" $SOURCE $DESTINATION ;;
    "dot_" | * )
      lnk "Linking" $SOURCE $DESTINATION ;;
  esac
}

sync_files()
{
  local dotfiles_src="$1"
  local dotfiles_subdirectory="$2"

  for SOURCE in ${dotfiles_src}; do
    DOTFILES_FILE=$(basename $SOURCE)

    # if there are two parameters register the sub directory
    if [[ $# == 2 ]] ; then
      HOME_FILE="${USER_HOME}/${dotfiles_subdirectory}/$(file_real_name $DOTFILES_FILE)"
      BACKUP_FILE="${DOTFILES_BKUP}/${dotfiles_subdirectory}/$(basename $HOME_FILE)"
      [[ "${DOTFILES_FILE::4}" == "mkd_" ]] && SUBDIR="$(get_dir $SOURCE $DOTFILES_SRC)" || SUBDIR=$dotfiles_subdirectory
    else
      HOME_FILE="${USER_HOME}/$(file_real_name $DOTFILES_FILE)"
      BACKUP_FILE="${DOTFILES_BKUP}/$(basename $HOME_FILE)"
      [[ "${DOTFILES_FILE::4}" == "mkd_" ]] && SUBDIR="$(get_dir $SOURCE $DOTFILES_SRC)" || SUBDIR=""
    fi

    # If File is not in home just write
    if not_exists_file $HOME_FILE ; then
      dotfiles_action $DOTFILES_FILE $SOURCE $HOME_FILE
    # Don't do anything if dotfile is in home directory
    elif not_exists_file $SOURCE $HOME_FILE ; then
      # Just move file in home dir if there is not already a backup
      if not_exists_file $BACKUP_FILE ; then
        mov "Backing up" $HOME_FILE $BACKUP_FILE
        dotfiles_action $DOTFILES_FILE $SOURCE ${HOME_FILE}
      # If there is a backup ask user if its ok to overwrite backed up file
      else
        l_question="Backup of $(tput setaf 2)${DOTFILES_FILE:4}$(tput sgr0) already exists.  Overwrite existing backup - (Y)es, (N)o: "
        l_result=$(confirm_move ${l_question})
        if $l_result ; then
          mov "Backing up" $HOME_FILE $BACKUP_FILE
          dotfiles_action $DOTFILES_FILE $SOURCE ${HOME_FILE}
        fi
      fi
    fi
    [[ "${DOTFILES_FILE::4}" == "mkd_" ]] && [[ $SUBDIR ]] && sync_files "${SOURCE%/}/*" "$(get_dir $SOURCE $DOTFILES_SRC)"
  done
}


clean_dotfiles()
{
  # Should only be list of removed git files
  GIT_CHANGES=$1
  for SOURCE in ${1}; do
    HOME_FILE="${USER_HOME}/$(get_dir $DOTFILES_SRC/$SOURCE $DOTFILES_SRC)"
    SUBDIR="$(get_dir $DOTFILES_SRC/$(dirname $SOURCE) $DOTFILES_SRC)"

    if [[ -f $HOME_FILE ]] || [[ -h $HOME_FILE ]] ; then
      rm_f "Removed (from GIT)" $HOME_FILE

      if  [[ "$SUBDIR" ]] && [[ -e ${USER_HOME}/${SUBDIR} ]] && [[ $(ls -1A ${USER_HOME}/${SUBDIR} | wc -l ) -eq 0 ]] ; then
        rm_d "Removed (from GIT)" "${USER_HOME}/${SUBDIR}"
      fi
    elif [[ -d $HOME_FILE ]] && [[ $(ls -1A ${HOME_FILE} | wc -l ) -eq 0 ]] ; then
      rm_d "Removed (from GIT)" $HOME_FILE
    fi
  done
}

install_dotfiles()
{
  if [[ $# == 0 ]] ; then
    sync_files "${DOTFILES_SRC%/}/*"
  else
    sync_files "${1%/}/*"
  fi
}
